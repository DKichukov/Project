import java.io.*;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Objects;import java.util.Scanner;import java.util.regex.Matcher;import java.util.regex.Pattern;public class EmployeeVacationProgram {    public static void printTableFormatNoNum() {        System.out.print("_________________________________________________________________________________________\n");        System.out.print("|      Име:     | ");        System.out.print("     Имейл     | ");        System.out.print("     ID:    |");        System.out.print("  Начало  |");        System.out.print("   Край   |");        System.out.print("   Тип   |");        System.out.print("  Статус | \n");        System.out.print("-----------------------------------------------------------------------------------------\n");    }    public static void printTableFormatPlusNum() {        System.out.print("_________________________________________________________________________________________\n");        System.out.print("| №| ");        System.out.print("     Име:     | ");        System.out.print("     Имейл    | ");        System.out.print("    ID:    |");        System.out.print("  Начало  |");        System.out.print("   Край   |");        System.out.print("   Тип   |");        System.out.print(" Статус | \n");        System.out.print("-----------------------------------------------------------------------------------------\n");    }    public static boolean isValidMailFormat(String email) {        String emailRegex = "^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,6}$";        Pattern emailPat = Pattern.compile(emailRegex, Pattern.CASE_INSENSITIVE);        Matcher matcher = emailPat.matcher(email);        return matcher.find();    }    public static boolean isDateFormatValid(String dateFormat) {        DateFormat df = new SimpleDateFormat("dd.MM.yyyy");        df.setLenient(false);        try {            df.parse(dateFormat.trim());        } catch (ParseException pe) {            return false;        }        return true;    }    public static boolean isIdNumberTenDigits(String idNums) {        return idNums.length() == 10;    }    public static boolean checkHolidayType(String textIn) {        return Objects.equals(textIn.toLowerCase(), "платена") || Objects.equals(textIn.toLowerCase(), "неплатена");    }    public static boolean checkName(String[][] tableNames, String nameIn) {        for (int i = 0; i < readCsvFile(); i++) {            if (nameIn.equalsIgnoreCase(tableNames[i][1])) {                return true;            }        }        return false;    }    public static boolean checkStatus(String statusInput) {        return Objects.equals(statusInput.toLowerCase(), "одобрена") || Objects.equals(statusInput.toLowerCase(), "отказана") || Objects.equals(statusInput.toLowerCase(), "чакаща");    }    public static void loadTable(String[][] dataInput, int endNum, int startFrom) {        for (int i = 0; i < endNum; i++) {            for (int j = startFrom; j < dataInput[0].length; j++) {                System.out.print("| " + dataInput[i][j]);            }            System.out.println(" |\n" + "-----------------------------------------------------------------------------------------");        }    }    public static int readCsvFile() {        int lnCounter = 0;        String rowNum;        try {            BufferedReader br = new BufferedReader(new FileReader("database.csv"));            while ((rowNum = br.readLine()) != null) {                lnCounter++;                if (rowNum.trim().isEmpty()) {                    lnCounter--;                    break;                }            }            br.close();        } catch (IOException e) {            System.out.print("Проблем с прочитането на данните в CSV файла!");            e.printStackTrace();        }        return lnCounter;    }    public static void copyCsvFileToArray(String[][] dataFile) throws IOException {        int lnCount = 0;        String line;        BufferedReader br = new BufferedReader(new FileReader("database.csv"));        while ((line = br.readLine()) != null) {            lnCount++;            String[] data = (line.split(","));            for (int comaCounter = 0; comaCounter < dataFile[0].length; comaCounter++) {                dataFile[lnCount - 1][comaCounter] = data[comaCounter] + "";            }        }        br.close();    }    public static void saveDataToCSVFile(String[] dataSave) {        try {            FileWriter fw = new FileWriter("database.csv", true);            BufferedWriter bw = new BufferedWriter(fw);            bw.newLine();            for (String tempData : dataSave) {                bw.write(tempData + ",");            }            bw.close();        } catch (IOException e) {            System.out.println("Проблем със записване на данните!");            e.printStackTrace();        }    }    public static void saveChangesToCSVFile(String[][] recTable, int recordsNum) {        try {            FileWriter fw = new FileWriter("database.csv");            BufferedWriter bw = new BufferedWriter(fw);            for (int i = 0; i < recTable.length; i++) {                for (int j = 0; j < recTable[0].length; j++) {                    if (recTable[i][j] != null && !recTable[i][j].isEmpty()) {                        bw.write(recTable[i][j] + ",");                    }                }                if (i < (recordsNum - 1)) {                    bw.newLine();                }            }            bw.close();        } catch (IOException e) {            System.out.println("Възниква грешка при записване на промените!");            e.printStackTrace();        }    }    public static void main(String[] args) throws IOException {        Scanner sc = new Scanner(System.in);        int count = readCsvFile();        String[][] mainTable = new String[20][8];        int ch;        copyCsvFileToArray(mainTable);        do {            System.out.println("***  Система за отпуски  ***");            System.out.println("---------------------------------------");            System.out.println("   1. Заяви отпуска");            System.out.println("   2. Виж всички отпуски");            System.out.println("   3. Виж отпуска за служител");            System.out.println("   4. Промени статус на отпуска");            System.out.println("   5. Иход");            System.out.println("---------------------------------------");            System.out.println("    Брой записи -> " + count + " бр.");            System.out.println("---------------------------------------");            System.out.print("    Въведи избор:");            ch = sc.nextInt();            switch (ch) {                case 1 -> {                    String endChoice;                    do {                        mainTable[count][0] = String.valueOf(1 + count);                        System.out.print("Въведи име и фамилия: ");                        sc.nextLine();                        mainTable[count][1] = sc.nextLine();                        do {                            System.out.print("Въведи имейл: ");                            mainTable[count][2] = sc.next();                            System.out.print(isValidMailFormat(mainTable[count][2]) ? "" : " Въвели сте грешен мейл. Опитайте " +                                    "отново!\n");                        } while (!isValidMailFormat(mainTable[count][2]));                        do {                            System.out.print("Въведи ЕГН (десет цифри):");                            mainTable[count][3] = sc.next();                            System.out.print(isIdNumberTenDigits(mainTable[count][3]) ? "" : " Въвели сте грешно ЕГН. " +                                    "Опитайте отново!\n");                        } while (mainTable[count][3].length() != 10);                        do {                            System.out.print("Начало на отпуската (дд.мм.гггг): ");                            mainTable[count][4] = sc.next();                            System.out.print(isDateFormatValid(mainTable[count][4]) ? "" : "Въвели сте грешен формат за" +                                    " дата. Опитайте отново!\n");                        } while (!isDateFormatValid(mainTable[count][4]));                        do {                            System.out.print("Край на отпуската (дд.мм.гггг): ");                            mainTable[count][5] = sc.next();                            System.out.print(isDateFormatValid(mainTable[count][5]) ? "" : "Въвели сте грешен формат за" +                                    " дата. Опитайте отново!\n");                        } while (!isDateFormatValid(mainTable[count][5]));                        do {                            System.out.print("Въведи тип на отпуска (планена / неплатена):");                            mainTable[count][6] = sc.next();                            System.out.print(checkHolidayType(mainTable[count][6]) ? "" : "Въведен е грешен тип. " +                                    "Опитайте отново!\n");                        } while (!checkHolidayType(mainTable[count][6]));                        mainTable[count][7] = " ";                        System.out.println("Искате ли да въведете друг запис? Да/Не.");                        endChoice = sc.next();                        saveDataToCSVFile(mainTable[count]);                        count++;                    } while (endChoice.equals("да"));                }                case 2 -> {                    if (count < 1) {                        System.out.println("Няма записи в програмата!");                    } else {                        printTableFormatNoNum();                        loadTable(mainTable, count, 1);                    }                }                case 3 -> {                    if (count < 1) {                        System.out.println("Няма записи в програмата!");                    } else {                        String[][] buffer = new String[mainTable.length][mainTable[0].length];                        sc.nextLine();                        System.out.println("Въведи име и фамилия:");                        String enteredName = sc.nextLine();                        if (checkName(mainTable, enteredName)) {                            printTableFormatNoNum();                            for (int i = 0; i <= count; i++) {                                if (enteredName.equalsIgnoreCase(mainTable[i][1])) {                                    for (int j = 1; j < mainTable[0].length; j++) {                                        buffer[i][j] = mainTable[i][j];                                        System.out.print("| " + buffer[i][j]);                                    }                                    System.out.println(" |");                                }                            }                        } else {                            System.out.println("Няма служител с това име!");                        }                        System.out.print("-----------------------------------------------------------------------------------------\n");                    }                }                case 4 -> {                    if (count < 1) {                        System.out.println("Няма записи в програмата!");                    } else {                        printTableFormatPlusNum();                        loadTable(mainTable, count, 0);                        System.out.println("Изберете номер на заявка: ");                        int numRequest = sc.nextInt() - 1;                        if (numRequest >= count) {                            System.out.println("Несъществуващ запис!");                            break;                        } else {                            printTableFormatPlusNum();                        }                        for (int j = 0; j < mainTable[0].length; j++) {                            System.out.print("| " + mainTable[numRequest][j]);                        }                        System.out.println(" |\n" +                                "-----------------------------------------------------------------------------------------");                        do {                            System.out.println("Въведи статус (одобрена/отказана/чакаща):");                            String newStat = sc.next();                            mainTable[numRequest][7] = newStat;                            System.out.print(checkStatus(mainTable[numRequest][7]) ? "" : "Въведен е грешен статус. " +                                    "Опитайте отново!\n");                        } while (!checkStatus(mainTable[numRequest][7]));                        for (int j = 0; j < mainTable[0].length; j++) {                            System.out.print("| " + mainTable[numRequest][j]);                        }                        System.out.println(" |\n" +                                "-----------------------------------------------------------------------------------------");                        saveChangesToCSVFile(mainTable, count);                    }                }                case 5 -> System.out.println("Край на програмата!");                default -> System.out.println("Въвели сте грешен избор!!!");            }        } while (ch != 5);    }}